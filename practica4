PRÁCTICA 4: Interconexión de Servidores de Bases de Datos

Puntuación Máxima: 100 puntos.


Las interconexiones de servidores de bases de datos son operaciones que pueden ser muy útiles en diferentes contextos. Básicamente, se trata de acceder a datos que no están almacenados en nuestra base de datos, pudiendo combinarlos con los que ya tenemos.

En esta práctica veremos varias formas de crear un enlace entre distintos servidores de bases de datos.

Se pide:

    • Realizar un enlace entre dos servidores de bases de datos ORACLE, explicando la configuración necesaria en ambos extremos y demostrando su funcionamiento.
      
    • Realizar un enlace entre dos servidores de bases de datos Postgres, explicando la configuración necesaria en ambos extremos y demostrando su funcionamiento.
      
    • Realizar un enlace entre un servidor ORACLE y otro Postgres o MySQL empleando Heterogeneus Services, explicando la configuración necesaria en ambos extremos y demostrando su funcionamiento.
      

Esta práctica se realizará de forma individual.

Los servidores enlazados siempre tendrán que estar instalados en máquinas diferentes.






		ENLACE Oracle-Oracle

Para poder realizar la conexión entre dos Oracles tenemos que realizar una series de configuraciones en ambos servidores para que puedan conectarse entre ellos.

En la 1º máquina "debian1", nos dirigimos al fichero ""listener.ora"" y lo modificamos como podemos ver a continuación.

" nano /opt/oracle/product/12.2.0.1/dbhome_1/network/admin/listener.ora "

  GNU nano 2.2.6 Fichero: ....1/dbhome_1/network/admin/listener.ora             

SID_LIST_LISTENER =
 (SID_LIST =
  (SID_DESC =
   (GLOBAL_DBNAME = orcl)
   (ORACLE_HOME = /opt/oracle/product/12.2.0.1/dbhome_1)
   (SID_NAME = orcl)
  )
 )

LISTENER=
 (DESCRIPTION_LIST =
  (DESCRIPTION =
   (ADDRESS_LIST =
    (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
   )
   (ADDRESS_LIST =
    (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
   )
  )

oracle2----------------------------------->>>>>>

  GNU nano 2.2.6 Fichero: ....1/dbhome_1/network/admin/listener.ora             

SID_LIST_LISTENER =
 (SID_LIST =
  (SID_DESC =
   (GLOBAL_DBNAME = orcl)
   (ORACLE_HOME = /opt/oracle/product/12.2.0.1/dbhome_1)
   (SID_NAME = orcl)
  )
 )

LISTENER=
 (DESCRIPTION_LIST =
  (DESCRIPTION =
   (ADDRESS_LIST =
    (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
   )
   (ADDRESS_LIST =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))
   )
  )
 )


- Reiniciamos el servicio listener:

	lsnrctl stop && lsnrctl start

- Vemos el estado de listener:

	oracle@debian1:~$ lsnrctl start

LSNRCTL for Linux: Version 12.2.0.1.0 - Production on 14-DIC-2019 18:13:22

Copyright (c) 1991, 2016, Oracle.  All rights reserved.

Iniciando /opt/oracle/product/12.2.0.1/dbhome_1/bin/tnslsnr: espere...

TNSLSNR for Linux: Version 12.2.0.1.0 - Production
El archivo de parámetros del sistema es /opt/oracle/product/12.2.0.1/dbhome_1/network/admin/listener.ora
Mensajes de log escritos en /opt/oracle/diag/tnslsnr/debian1/listener/alert/log.xml
Recibiendo en: (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))
Recibiendo en: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=127.0.0.1)(PORT=1521)))

Conectándose a (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))
ESTADO del LISTENER
------------------------
Alias                     LISTENER
Versión                   TNSLSNR for Linux: Version 12.2.0.1.0 - Production
Fecha de Inicio       14-DIC-2019 18:13:22
Tiempo Actividad   0 días 0 hr. 0 min. 0 seg.
Nivel de Rastreo        off
Seguridad               ON: Local OS Authentication
SNMP                      OFF
Parámetros del Listener   /opt/oracle/product/12.2.0.1/dbhome_1/network/admin/listener.ora
Log del Listener          /opt/oracle/diag/tnslsnr/debian1/listener/alert/log.xml
Recibiendo Resumen de Puntos Finales...
  (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))
  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=127.0.0.1)(PORT=1521)))
Resumen de Servicios...
El servicio "orcl" tiene 1 instancia(s).
  La instancia "orcl", con estado UNKNOWN, tiene 1 manejador(es) para este servicio...
El comando ha terminado correctamente
oracle@debian1:~$ 


oracle@debian1:~$ lsnrctl status

LSNRCTL for Linux: Version 12.2.0.1.0 - Production on 14-DIC-2019 18:15:17

Copyright (c) 1991, 2016, Oracle.  All rights reserved.

Conectándose a (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))
ESTADO del LISTENER
------------------------
Alias                     LISTENER
Versión                   TNSLSNR for Linux: Version 12.2.0.1.0 - Production
Fecha de Inicio       14-DIC-2019 18:13:22
Tiempo Actividad   0 días 0 hr. 1 min. 55 seg.
Nivel de Rastreo        off
Seguridad               ON: Local OS Authentication
SNMP                      OFF
Parámetros del Listener   /opt/oracle/product/12.2.0.1/dbhome_1/network/admin/listener.ora
Log del Listener          /opt/oracle/diag/tnslsnr/debian1/listener/alert/log.xml
Recibiendo Resumen de Puntos Finales...
  (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))
  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=127.0.0.1)(PORT=1521)))
Resumen de Servicios...
El servicio "orcl" tiene 1 instancia(s).
  La instancia "orcl", con estado UNKNOWN, tiene 1 manejador(es) para este servicio...
El comando ha terminado correctamente
oracle@debian1:~$ 



    Para averiguar el SID_NAME, GLOBAL_DBNAME y el nombre del servidor:


Conectado a:
Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production


Sesión modificada.

SQL> SELECT SYS_CONTEXT('USERENV','INSTANCE_NAME') FROM dual;

SYS_CONTEXT('USERENV','INSTANCE_NAME')
--------------------------------------------------------------------------------
orasid

SQL> SELECT * FROM global_name;

GLOBAL_NAME
--------------------------------------------------------------------------------
ORCL

SQL> SELECT SYS_CONTEXT('USERENV', 'SERVER_HOST') FROM dual;

SYS_CONTEXT('USERENV','SERVER_HOST')
--------------------------------------------------------------------------------
debian1

SQL> 





A continuación realizamos la configuración del fichero tnsname.ora (si no se encuentra lo creamos). En este fichero podemos configurar los nombres de los servicios que está escuchando el servidor.



- ADDRESS: Especificamos el protocolo, IP de la máquina a la que queremos conectarnos.
- SERVICE_NAME: Nombre del servicio de la base de datos a la que nos conectaremos.




root@debian1:/home/oracle# cat /opt/oracle/product/12.2.0.1/dbhome_1/network/admin/tnsnames.ora 
LISTENER_ORCL =
 (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))


ORCL =
 (DESCRIPTION =
 (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
 (CONNECT_DATA =
 (SERVER = DEDICATED)
 (SERVICE_NAME = orcl)
 )
 )

ORCL =
 (DESCRIPTION =
 (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.127)(PORT = 1521))
 (CONNECT_DATA =
 (SERVER = DEDICATED)
 (SERVICE_NAME = orcl)
 )
 )




root@debian2:/home/oracle# cat /opt/oracle/product/12.2.0.1/dbhome_1/network/admin/tnsnames.ora 
LISTENER_ORCL =
 (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))


ORCL =
 (DESCRIPTION =
 (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
 (CONNECT_DATA =
 (SERVER = DEDICATED)
 (SERVICE_NAME = orcl)
 )
 )

ORCL =
 (DESCRIPTION =
 (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.17)(PORT = 1521))
 (CONNECT_DATA =
 (SERVER = DEDICATED)
 (SERVICE_NAME = orcl)
 )
 )



- Reiniciamos el servicio listener:

	lsnrctl stop && lsnrctl start



	Configuración de interconexión 

- Configurar dicho enlace en el cliente desde "sqlplus".

    Configuración enlace:

- Desde servidor2 a servidor1

SQL> create database link servidor1
  2  connect to alvaro identified by alvaro
  3  using 'orcl';

Enlace con la base de datos creado.


SQL> select * from cat@servidor1;

ninguna fila seleccionada

SQL> 


creamos una tabla en el servidor 1



SQL> describe compositores;
 Nombre                                    ¿Nulo?  Tipo
 ----------------------------------------- -------- ----------------------------
 ID					   NOT NULL VARCHAR2(5)
 NOMBRE 					    VARCHAR2(50)
 FECHANACIMIENTO				    DATE
 NACIONALIDAD					    VARCHAR2(30)
 URLBIOGRAFIA					    VARCHAR2(100)

SQL> 

volvemos hacer a realizar la consulta .


SQL> select * from cat@servidor1;

TABLE_NAME
--------------------------------------------------------------------------------
TABLE_TYPE
-----------
COMPOSITORES
TABLE


SQL> 

oracle@debian2:~$ sqlplus camargo/camargo

SQL*Plus: Release 12.2.0.1.0 Production on Dom Dic 22 16:32:46 2019

Copyright (c) 1982, 2016, Oracle.  All rights reserved.

Hora de Última Conexión Correcta: Dom Dic 22 2019 16:29:56 +01:00

Conectado a:
Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production


Sesión modificada.

SQL> select * from obras@servidor1;

CODIGO
------
URL
--------------------------------------------------------------------------------
NOMBRE_OBRA					   DURACION	FA
-------------------------------------------------- ------------ --
R1234B
https://www.youtube.com/watch?v=LP5_0mWM_ko
FUR ELISE					   05`07``	no

R1243B
https://www.youtube.com/watch?v=mtHKQWY6m80
CLARO DE LUNA					   17`27``	no

CODIGO
------
URL
--------------------------------------------------------------------------------
NOMBRE_OBRA					   DURACION	FA
-------------------------------------------------- ------------ --


SQL> 



- Realizamos lo mismo pero desde servidor1 a servidor2

	
SQL> create database link servidor2
  2  connect to camargo identified by camargo
  3  using 'orcl'

SQL> describe interpretes;
 Nombre                                    ¿Nulo?  Tipo
 ----------------------------------------- -------- ----------------------------
 ID_INTERPRETE				   NOT NULL VARCHAR2(10)
 NOMBRE_INTERPRETE				    VARCHAR2(50)

SQL> exit
Desconectado de Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production
oracle@debian2:~$ 


SQL> select * from cat@servidor2;

TABLE_NAME
--------------------------------------------------------------------------------
TABLE_TYPE
-----------
INTERPRETES
TABLE

COMPOSITORES
TABLE


SQL> exit
Desconectado de Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production
oracle@debian1:~$ exit

SQL> select * from interpretes@servidor2;

ID_INTERPR NOMBRE_INTERPRETE
---------- --------------------------------------------------
123456	   MAURICE ANDRE
1er456	   CLAUDIO ARRAU
654tgb	   DANIEL BARENBOIM
543frtyh   YURI BASHMET
12654f	   HEINZ HOLLIGER
qazwsxedc  VLADIMIR HOROWITZ
1mkonji    YEHUDI MENUHIN
1234567    MAURICE ANDRE
123345	   DAVID OISTRAKH
123321	   ITZHAK PERLMAN
123565	   MSTISLAV ROSTROPOVICH

ID_INTERPR NOMBRE_INTERPRETE
---------- --------------------------------------------------
123422     Marc-André Hamelin
1234777    PIERRE RAMPAL
124223	   RUBEN FERNANDEZ
12bgtyhn   Martha Argerich

15 filas seleccionadas.

SQL> 





	ENLACE POSTGRESQL A POSTGRESQL

- Primeramente modificamos el fichero pg_hba.conf que se encuentra en " /etc/postgresql/11/main/pg_hba.conf ", en el cual indicamos que permita la conexión remota desde la ip del otro servidor, lo modificamos de la siguiente manera.


servidor1 
root@servidor:/home/vagrant# 

---------------------------------------------------------------------

#
# Database administrative login by Unix domain socket
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
host    all             all             172.22.1.48/16          md5
# IPv6 local connections:
host    all             all             ::1/128                 md5



servidor2 

 
root@servidor:/home/vagrant# 

---------------------------------------------------------------------

#
# Database administrative login by Unix domain socket
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
host    all             all             172.22.1.47/16          md5
# IPv6 local connections:
host    all             all             ::1/128                 md5


- Reiniciamos el servicio:

	"systemctl restart postgresql"

- Creamos nuestra base de datos y el usuario con los privilegios correspondiente en las dos máquinas:

servidor1

postgres=# create user usuario1 with password 'usuario1';
CREATE ROLE
postgres=# create database practica4;
ERROR:  database "practica4" already exists
postgres=# grant all privileges on database practica4 to usuario1 ;
GRANT
postgres=# exit
postgres@servidor1:/home/vagrant$ psql -h localhost -U usuario1 -W -d practica4
Password: 
psql (11.5 (Debian 11.5-1+deb10u1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.

practica4=> create table compositores
practica4-> (
practica4(> ID varchar(5),
practica4(> Nombre varchar(50),
practica4(> FechaNacimiento date,
practica4(> Nacionalidad varchar(30),
practica4(> URLBiografia varchar(100),
practica4(> constraint fk_compositores primary key(ID),
practica4(> constraint nacimiento check(to_char(FechaNacimiento, 'YYYY') between '1290' and
practica4(> '1920'),
practica4(> constraint url check(URLBiografia~* 'www\.[a-zA-Z0-9 ]\.|es$|com$|net$|org$' ));
CREATE TABLE
practica4=> 

- Para poder conectarse a la base de datos, creamos el link(Lo hemos creado en las 2 máquinas).

practica4=# create extension dblink;
CREATE EXTENSION

practica4serv2=# create extension dblink;
CREATE EXTENSION

- Nos salimos y nos conectamos con el usuario1.

postgres@servidor1:/home/vagrant$ psql -h localhost -U usuario1 -W -d practica4
Password: 
psql (11.5 (Debian 11.5-1+deb10u1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.


servidor 2

postgres=# create user usuario2 with password 'usuario2';
CREATE ROLE
postgres=# create database practica4serv2;
ERROR:  database "practica4serv2" already exists
postgres=# grant all privileges on database practica4serv2 to usuario2 ;
GRANT

practica4serv2=> \d
         List of relations
 Schema | Name  | Type  |  Owner   
--------+-------+-------+----------
 public | obras | table | usuario2
(1 row)

practica4serv2=> 

- Desde servidor1 a servidor2

practica4=> select * from dblink('dbname=practica4serv2 host=172.22.1.47 user=usuario2 password=usuario2', 'select codigo_obra from obras') as obras (codigo_obra varchar);

 codigo_obra 
-------------
 R1234B
 R1235B
 C1236M
 R1237V
 R1238C
 R1239F
 R1240S
 R1245S
 R1242P
 R1243B
 C1276M
 C12M
(12 rows)


	ENLACE ENTRE ORACLE Y POSTGRESQL


Para enlazar estos dos servidores siendo diferentes gestores de bases de datos tenemos que realizar los siguientes pasos:

- Instalamos 

	apt install odbc-postgresql unixodbc

- A continuación modificamos el fichero odbcinst.ini.

  GNU nano 2.2.6          Fichero: /etc/odbcinst.ini                            

[PostgreSQL ANSI]
Description=PostgreSQL ODBC driver (ANSI version)
Driver=psqlodbca.so
Setup=libodbcpsqlS.so
Debug=0
CommLog=1
UsageCount=1

[PostgreSQL Unicode]
Description=PostgreSQL ODBC driver (Unicode version)
Driver=psqlodbcw.so
Setup=libodbcpsqlS.so
Debug=0
CommLog=1
UsageCount=1


- Además modificamos el fichero /etc/odbc.ini. Le introducimos en el fichero la ip de nuestro servidor psotgresql, usuario que gestiona la base de datos y contraseña a la que vamos a realizar la consulta y el puerto porque que está escuchando. 

oracle@debian1:~$ cat /etc/odbc.ini 
[PSQLA]
Debug           = 0
CommLog         = 0
ReadOnly        = 1
Driver          = PostgreSQL ANSI
Servername      = 192.168.1.16
Username        = camargo
Password        = camargo
Port            = 5432
Database        = practica4
Trace           = 0
TraceFile       = /tmp/sql.log
 
[PSQLU]
Debug           = 0
CommLog         = 0
# poner la siguiente variable a 1 si no se quiere permitir modificar datos remotamente
ReadOnly        = 0
Driver          = PostgreSQL Unicode
Servername      = 192.168.1.16
Username        = camargo
Password        = camargo
Port            = 5432
Database        = practica4
Trace           = 0
TraceFile       = /tmp/sql.log
 
[Default]
Driver = /usr/lib/x86_64-linux-gnu/odbc/liboplodbcS.so
oracle@debian1:~$ 

- Realizamos una serie de comprobaciones:



- Comprueba si el fichero odbcinst.ini está configurado correctamente.

root@debian1:/home/oracle# odbcinst -q -d
[PostgreSQL ANSI]
[PostgreSQL Unicode]
root@debian1:/home/oracle# 

- Comprueba si el fichero odbc.ini ha sido configurado correctamente.

root@debian1:/home/oracle# odbcinst -q -s
[PSQLA]
[PSQLU]
[Default]
root@debian1:/home/oracle# 

- Comprobamos conexión:

root@debian1:/home/oracle# isql -v PSQLU
+---------------------------------------+
| Connected!                            |
|                                       |
| sql-statement                         |
| help [tablename]                      |
| quit                                  |
|                                       |
+---------------------------------------+
SQL> 

root@debian1:/home/oracle# isql -v PSQLA
+---------------------------------------+
| Connected!                            |
|                                       |
| sql-statement                         |
| help [tablename]                      |
| quit                                  |
|                                       |
+---------------------------------------+
SQL> 


- CONFIGURACIÓN HETEROGENEOUS SERVICES

- Para ello creamos el siguiente fichero:

  GNU nano 2.2.6                      Fichero: /opt/oracle/product/12.2.0.1/dbhome_1/initPSQLU.ora                                                    

HS_FDS_CONNECT_INFO = PSQLU
HS_FDS_TRACE_LEVEL = Debug
HS_FDS_SHAREABLE_NAME = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so
HS_LANGUAGE = AMERICAN_AMERICA.WE8ISO8859P1
set ODBCINI=/etc/odbc.ini


- Configuramos el fichero listener.ora

/opt/oracle/product/12.2.0.1/dbhome_1/network/admin/listener.ora 

 (DESCRIPTION_LIST =
  (DESCRIPTION =
   (ADDRESS_LIST =
    (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
   )
   (ADDRESS_LIST =
    (ADDRESS = (PROTOCOL = TCP)(HOST =0.0.0.0)(PORT = 1521))
   )
  )
 )
SID_LIST_LISTENER=
 (SID_LIST=
 (SID_DESC=
 (SID_NAME=PSQLU)
 (ORACLE_HOME=/opt/oracle/product/12.2.0.1/dbhome_1)
 (PROGRAM=dg4odbc)
 )
 )

- Configuramos tnsnames.ora

/opt/oracle/product/12.2.0.1/dbhome_1/network/admin/tnsnames.ora

PSQLU =
 (DESCRIPTION=
 (ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))
 (CONNECT_DATA=(SID=PSQLU))
 (HS=OK)
 )


- Reiniciamos listener

	* lsnrctl stop
	* lsnrctl start


- Modificamos el fichero pg_hba.conf del servidor de postgresql (Realizamos los pasos del ejerccicio de postgresql anterior).

  GNU nano 3.2                                             /etc/postgresql/11/main/pg_hba.conf                                                        



# DO NOT DISABLE!
# If you change this first entry you will need to make sure that the
# database superuser can access the database using some other method.
# Noninteractive access to all databases is required during automatic
# maintenance (custom daily cronjobs, replication, and similar tasks).
#
# Database administrative login by Unix domain socket
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
host    all             all             192.168.1.17/24         md5
# IPv6 local connections:
host    all             all             ::1/128                 md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     peer
host    replication     all             127.0.0.1/32            md5
host    replication     all             ::1/128                 md5

- Reiniciamos postgresql

	systemctl restart postgresql

- A continuación procedemos a crear el link de la base de datos en oracle para poder consultar en postgresql.

SQL> create public database link linkpostgres
  2  connect to "camargo" identified by "camargo"
  3  using 'PSQLU';

Enlace con la base de datos creado.


- Comprobamos la conexión:

SQL> select * from "obras"@linkpostgres;

codigo_obra
--------------------------------------------------------------------------------
url
--------------------------------------------------------------------------------
nombre_obra
--------------------------------------------------------------------------------
duracion
--------------------------------------------------------------------------------
facil_escucha
------------------------------------
R1234B
https://www.youtube.com/watch?v=LP5_0mWM_ko
FUR ELISE

codigo_obra
--------------------------------------------------------------------------------
url
--------------------------------------------------------------------------------
nombre_obra
--------------------------------------------------------------------------------
duracion
--------------------------------------------------------------------------------
facil_escucha
------------------------------------
05`07``
no
















